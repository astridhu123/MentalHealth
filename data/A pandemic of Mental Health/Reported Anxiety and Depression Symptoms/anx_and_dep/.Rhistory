y <- c(1, 4, 9, 16, 25)
plot(x, y)
plot(x, y)
x <- c(1, 2, 3, 4, 5)
y <- c(1, 4, 9, 16, 25)
plot(x, y)
x <- c(1, 2, 3, 4, 5)
y <- c(1, 4, 9, 16, 25)
plot(x, y, type = 'b')
setwd("~/Desktop/R")
setwd("~/")
install.packages('nycflight13')
plot(cars)
plot(cars)
head(cars)
plot(cars)
head(cars)
# 6/1/22 -- Review R and Check Answers
# File, New Script.
rm(list*ls())
0.7*0.2
# Part a answer
0.7*0.2 / (0.7*0.2 + 0.1*0.8)
# Part b answer
0.7*0.3*0.2 / (0.7*0.3*0.2 + 0.1*0.9*0.8)
# Part b.1 answer -- person takes 2 tests and both are positive
(0.7^2)*0.2 / ((0.7^2)*0.2 + (0.1^2)*0.8)
# Part b.2 answer -- person takes 3 tests and both are positive
(0.7^3)*0.2 / ((0.7^3)*0.2 + (0.1^3)*0.8)
# Part b.3 - Generalization of part b
# Person takes n tests and all are positive
n = 4
(0.7^n)*0.2 / ((0.7^n)*0.2 + (0.1^n)*0.8)
# Part b.4 - Generalization of part b, with vectors
# Person takes n tests and all are positive
n = 20
x <- 0:n
y <- (0.7^x)*0.2 / ((0.7^x)*0.2 + (0.1^x)*0.8)
ls()
n
x
y
plot(x,y)
plot(x,y, type = "b")
plot(x,y, type = "b", col = "blue")
# Part E: Using simulation
#help("rbinom")
sum(rbinom(100, 1, 0.5))
x <- rbinom(10000, 100, 0.5)
hist(x, col = "red")
summary(x)
sd(x)
# Using P(+|A) = 0.7 = p = probability of success
x <- rbinom(10000, 100, 0.7)
hist(x, col = "red")
summary(x)
sd(x)
# Using P(+|Ac) = 0.1 = p = probability of success
y <- rbinom(10000, 100, 0.1)
hist(y, col = "green")
summary(y)
sd(y)
# Putting them together in a single graph could be done in many ways.
# For example:
xy <- c(x,y)
hist(xy)
# Check how to change the colors...
hist(xy, xlim = range(0:100))
# xlim = range(breaks)
# Example two: side by side
par(mfrow = c(2, 1))
hist(x, col = "red")
hist(y, col = "green")
# Example two: side by side
par(mfrow = c(2, 1))
hist(x, col = "red", xlim = range(0:100))
hist(y, col = "green", xlim = range(0:100))
# Part D: Generalization of part b, and + and - results
# The person takes 100 tests, 60 are positive (+) and 40 are negative (-)
p <- ((0.7^60) * (0.3^40) * 0.2) / ((0.7^60) * (0.3^40) * 0.2 + (0.1^60) * (0.9^40) *0.8)
ls()
p
# Part D.1: Flipping it (Von)
# Generalization of part b,and + and - results
# The person takes 100 tests, 40 are positive (+) and 60 are negative (-)
p <- ((0.7^40) * (0.3^60) * 0.2) / ((0.7^40) * (0.3^60) * 0.2 + (0.1^40) * (0.9^60) *0.8)
p
# Part D.2: With Vectors
# Generalization of part b, with vectors, and + and - results
# The person takes 100 tests, x are positive (+) and 100-x are negative (-)
x <- 0:100
y <- 100 - x
p <- ((0.7^x) * (0.3^y) * 0.2) / ((0.7^x) * (0.3^y) * 0.2 + (0.1^x) * (0.9^y) *0.8)
p
p[36:40]
plot(x,p)
plot(35:40, p[35:40], type = "b")
# Fix the graph for the normal distribution.
pnorm(3) - pnorm(-3)
pnorm(2) - pnorm(-2)
pnorm(1) - pnorm(-1)
x <- seq(-4,4,0.01)
y <- dnorm(x)
plot(x,y, type = "l")
abline(v = c(-3,-2,-1,1,2,3))
# Define Functions:
f1 <- function(x) {
2*x
}
f1(3)
f2 <- function(x,y) {
2*x+y
}
f2(3,5)
# Let's use this.
f_test <- function(n,x) {
y <- n - x
p <- ((0.7^x) * (0.3^y) * 0.2) / ((0.7^x) * (0.3^y) * 0.2 + (0.1^x) * (0.9^y) *0.8)
p
}
f_test(5,4)
# p1 = Sensitivity -- True Positive Rate.  1 - p1 = false negative rate.
# p2 = Specificity -- True Negative Rate.  1 - p2 = false positive rate.
# p = prevalence of the condition in the population
f_test1 <- function(n,x,p1,p2,p) {
y <- n - x
posterior <- ((p1^x) * ((1-p1)^y) * p) / ((p1^x) * ((1-p1)^y) * p + ((1-p2)^x) * (p2^y) * (1-p))
posterior
}
f_test1(10,5,0.846,0.985,0.104)
f_test1 <- function(n,x,p1,p2,p) {
y <- n - x
posterior <- ((p1^x) * ((1-p1)^y) * p) / ((p1^x) * ((1-p1)^y) * p + ((1-p2)^x) * (p2^y) * (1-p))
posterior
}
f_test1(10,5,0.846,0.985,0.104)
# 6/1/22 -- Review R and Check Answers
# File, New Script.
rm(list*ls())
0.7*0.2
# Part a answer
0.7*0.2 / (0.7*0.2 + 0.1*0.8)
# Part b answer
0.7*0.3*0.2 / (0.7*0.3*0.2 + 0.1*0.9*0.8)
# Part b.1 answer -- person takes 2 tests and both are positive
(0.7^2)*0.2 / ((0.7^2)*0.2 + (0.1^2)*0.8)
# Part b.2 answer -- person takes 3 tests and both are positive
(0.7^3)*0.2 / ((0.7^3)*0.2 + (0.1^3)*0.8)
# Part b.3 - Generalization of part b
# Person takes n tests and all are positive
n = 4
(0.7^n)*0.2 / ((0.7^n)*0.2 + (0.1^n)*0.8)
# Part b.4 - Generalization of part b, with vectors
# Person takes n tests and all are positive
n = 20
x <- 0:n
y <- (0.7^x)*0.2 / ((0.7^x)*0.2 + (0.1^x)*0.8)
ls()
n
x
y
plot(x,y)
plot(x,y, type = "b")
plot(x,y, type = "b", col = "blue")
# Part E: Using simulation
#help("rbinom")
sum(rbinom(100, 1, 0.5))
x <- rbinom(10000, 100, 0.5)
hist(x, col = "red")
summary(x)
sd(x)
# Using P(+|A) = 0.7 = p = probability of success
x <- rbinom(10000, 100, 0.7)
hist(x, col = "red")
summary(x)
sd(x)
# Using P(+|Ac) = 0.1 = p = probability of success
y <- rbinom(10000, 100, 0.1)
hist(y, col = "green")
summary(y)
sd(y)
# Putting them together in a single graph could be done in many ways.
# For example:
xy <- c(x,y)
hist(xy)
# Check how to change the colors...
hist(xy, xlim = range(0:100))
# xlim = range(breaks)
# Example two: side by side
par(mfrow = c(2, 1))
hist(x, col = "red")
hist(y, col = "green")
# Example two: side by side
par(mfrow = c(2, 1))
hist(x, col = "red", xlim = range(0:100))
hist(y, col = "green", xlim = range(0:100))
# Part D: Generalization of part b, and + and - results
# The person takes 100 tests, 60 are positive (+) and 40 are negative (-)
p <- ((0.7^60) * (0.3^40) * 0.2) / ((0.7^60) * (0.3^40) * 0.2 + (0.1^60) * (0.9^40) *0.8)
ls()
p
# Part D.1: Flipping it (Von)
# Generalization of part b,and + and - results
# The person takes 100 tests, 40 are positive (+) and 60 are negative (-)
p <- ((0.7^40) * (0.3^60) * 0.2) / ((0.7^40) * (0.3^60) * 0.2 + (0.1^40) * (0.9^60) *0.8)
p
# Part D.2: With Vectors
# Generalization of part b, with vectors, and + and - results
# The person takes 100 tests, x are positive (+) and 100-x are negative (-)
x <- 0:100
y <- 100 - x
p <- ((0.7^x) * (0.3^y) * 0.2) / ((0.7^x) * (0.3^y) * 0.2 + (0.1^x) * (0.9^y) *0.8)
p
p[36:40]
plot(x,p)
plot(35:40, p[35:40], type = "b")
'''
# Fix the graph for the normal distribution.
pnorm(3) - pnorm(-3)
pnorm(2) - pnorm(-2)
pnorm(1) - pnorm(-1)
x <- seq(-4,4,0.01)
y <- dnorm(x)
plot(x,y, type = "l")
abline(v = c(-3,-2,-1,1,2,3))
'''
# Define Functions:
f1 <- function(x) {
2*x
}
f1(3)
f2 <- function(x,y) {
2*x+y
}
f2(3,5)
# Let's use this.
f_test <- function(n,x) {
y <- n - x
p <- ((0.7^x) * (0.3^y) * 0.2) / ((0.7^x) * (0.3^y) * 0.2 + (0.1^x) * (0.9^y) *0.8)
p
}
f_test(5,4)
# p1 = Sensitivity -- True Positive Rate.  1 - p1 = false negative rate.
# p2 = Specificity -- True Negative Rate.  1 - p2 = false positive rate.
# p = prevalence of the condition in the population
f_test1 <- function(n,x,p1,p2,p) {
y <- n - x
posterior <- ((p1^x) * ((1-p1)^y) * p) / ((p1^x) * ((1-p1)^y) * p + ((1-p2)^x) * (p2^y) * (1-p))
posterior
}
f_test1(10,5,0.846,0.985,0.104)
library(readr)
us_mental_illness <- read_csv("Documents/Ursinus REU/Shiny_App/us_mental_illness.csv")
View(us_mental_illness)
library(shiny); runApp('Documents/Ursinus REU/Shiny_App/us_mental_illness_app.R')
runApp('Documents/Ursinus REU/Shiny_App/us_mental_illness_app.R')
runApp('Documents/Ursinus REU/Shiny_App/us_mental_illness_app.R')
library(shiny); runApp('Documents/Ursinus REU/Shiny_App/us_mental_illness_app.R')
library(shiny)
library(tidyverse)
library(dplyr)
library(scales)
library(plotly)
# Creates the user interface -- UI
ui <- fluidPage(titlePanel("Mental Health in the United States"),
# Creates sidebar with various input panels -- 3 drop down menus, slider, submit button
sidebarLayout(
sidebarPanel(
selectInput(inputId = "state",
label = "State 1:",
choices = list("Alabama", "Alaska", "Arizona", "Arkansas",
"California", "Colorado", "Connecticut", "District of Columbia",
"Delaware", "Florida", "Georgia", "Hawaii",
"Idaho", "Illinois", "Indiana", "Iowa",
"Kansas", "Kentucky", "Louisiana", "Maine",
"Maryland","Massachusetts", "Michigan", "Minnesota",
"Mississippi","Missouri", "Montana", "Nebraska",
"Nevada", "New Hampshire", "New Jersey", "New Mexico",
"New York","North Carolina", "North Dakota", "Ohio",
"Oklahoma","Oregon", "Pennsylvania", "Rhode Island",
"South Carolina", "South Dakota", "Tennessee", "Texas",
"Utah", "Vermont", "Virginia", "Washington",
"West Virginia","Wisconsin", "Wyoming", "United States"), selected="United States", multiple=FALSE),
selectInput(inputId = "state2",
label = "State 2:",
choices = list("Alabama", "Alaska", "Arizona", "Arkansas",
"California", "Colorado", "Connecticut", "District of Columbia",
"Delaware", "Florida", "Georgia", "Hawaii",
"Idaho", "Illinois", "Indiana", "Iowa",
"Kansas", "Kentucky", "Louisiana", "Maine",
"Maryland","Massachusetts", "Michigan", "Minnesota",
"Mississippi","Missouri", "Montana", "Nebraska",
"Nevada", "New Hampshire", "New Jersey", "New Mexico",
"New York","North Carolina", "North Dakota", "Ohio",
"Oklahoma","Oregon", "Pennsylvania", "Rhode Island",
"South Carolina", "South Dakota", "Tennessee", "Texas",
"Utah", "Vermont", "Virginia", "Washington",
"West Virginia","Wisconsin", "Wyoming", "United States"), selected="Alabama", multiple=FALSE),
selectInput(inputId = "factor",
label = "Factor:",
choices = list("Mental Illness", "Substance Use Disorder", "Suicidal Thoughts", "Untreated Mental Illness"),
selected = "Mental Illness", multiple = FALSE),
sliderInput(inputId = "year",
label = "Year Range:",
min = 2018,
max = 2022,
value = c(2018,2022),
sep = ""),
submitButton(text = "Compare states")
),
# Creates main panel to display outputs -- plot and table
mainPanel(
# Creates 2 tabs -- plot and table
tabsetPanel(
tabPanel("Plot", plotOutput(outputId = "stateplot")),
tabPanel("Table", tableOutput(outputId = "statetable"))
)
)
),
)
server <- function(input, output) {
# Read in .csv file with dataset
mental_illness <- read.csv("us_mental_illness.csv")
# Renders and outputs plot
output$stateplot <- renderPlot(
mental_illness %>%
# Filters the data using the 2 selected states and mental health factor
filter((state == input$state | state == input$state2) & factor == input$factor)%>%
# Creates the plot
ggplot(aes(x = year, y = percentage, group = factor(state), colour = factor(state))) +
geom_point() +
geom_line() +
# Concatenates the ggplot title
ggtitle(paste(input$factor,"in", input$state, "and", input$state2, sep=" ")) +
labs(colour = "States") +
# Increases plot text
theme(plot.title = element_text(size = 18, face = "bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=13,face="bold"),
legend.text=element_text(size=14),
legend.title = element_text(size=14)) +
# Sets the x-axis and y-axis scales for the plot
scale_x_continuous(name = "Year", limits = input$year) +
scale_y_continuous(name = "Percentage of Population", labels = scales::percent_format(scale = 1)) +
coord_trans(x ="log10", y="log10")
)
# Renders and outputs table
output$statetable <- renderTable(
# Filters the data set by two selected states and mental health factor
# NEED TO FILTER BY YEAR RANGE AS WELL
stateFilter <- filter(mental_illness, ((state == input$state | state == input$state2) & factor == input$factor))
)
# Adds a bar graph that fills as states are added to the U.S. total
}
shinyApp(ui = ui, server = server)
setwd("~/Documents/Ursinus REU/Age_Anx_Dep")
# Import libraries
library(ggplot2)
library(plotly)
library(ggthemes)
# Read in CSV to variable for age filter
dep_age <- read.csv("us_dep_age.csv")
anx_age <- read.csv("us_anx_age.csv")
anx_or_dep_age <- read.csv("us_anx_or_dep_age.csv")
# General function created to plot the anxiety/depression rates by different filters in U.S.
general_fun <- function(indicator, filter, dataset, input) {
# Converts character date into numeric date
dataset$date1 <- as.character(dataset$period_end)
dataset$date2 <- as.Date(dataset$date1, "%m/%d/%y")
# Graphs the lines on a plot for a specified data set
graph <- ggplot(dataset[dataset$group %in% input,], aes(date2, value))+
geom_line(aes(colour = group))+
labs(title = paste(indicator, "over Time"),
x = "Date",
y = "Percentage",
color = filter)+
theme_economist()
ggplotly(graph)
}
# Function calls for age filter
general_fun("Depression", "Age", dep_age, c("18 - 29 years", "30 - 39 years", "40 - 49 years", "50 - 59 years", "60 - 69 years", "70 - 79 years", "80 years and above"))
# Function calls for age filter
general_fun("Depression Symptoms", "Age", dep_age, c("18 - 29 years", "30 - 39 years", "40 - 49 years", "50 - 59 years", "60 - 69 years", "70 - 79 years", "80 years and above"))
general_fun("Anxiety Symptoms", "Age", anx_age, c("18 - 29 years", "30 - 39 years", "40 - 49 years", "50 - 59 years", "60 - 69 years", "70 - 79 years", "80 years and above"))
general_fun("Anxiety or Depression Symptoms", "Age", anx_or_dep_age, c("18 - 29 years", "30 - 39 years", "40 - 49 years", "50 - 59 years", "60 - 69 years", "70 - 79 years", "80 years and above"))
# Function calls for age filter
general_fun("Depression Symptoms", "Age", dep_age, c("18 - 29 years", "30 - 39 years", "40 - 49 years", "50 - 59 years", "60 - 69 years", "70 - 79 years", "80 years and above"))
general_fun("Anxiety Symptoms", "Age", anx_age, c("18 - 29 years", "30 - 39 years", "40 - 49 years", "50 - 59 years", "60 - 69 years", "70 - 79 years", "80 years and above"))
setwd("~/Documents/Ursinus REU/Age_Anx_Dep")
# Read in CSV to variable for state filter
dep_state <- read.csv("dep_state.csv")
anx_state <- read.csv("anx_state.csv")
anx_or_dep_state <- read.csv("anx_or_dep_state.csv")
setwd("~/Documents/Ursinus REU/Age_Anx_Dep/anx_and_dep")
setwd("~/Documents/Ursinus REU/Age_Anx_Dep/anx_and_dep")
# Read in CSV to variable for state filter
dep_state <- read.csv("dep_state.csv")
anx_state <- read.csv("anx_state.csv")
anx_or_dep_state <- read.csv("anx_or_dep_state.csv")
# Converts dates for R to understand
date_convert <- function(dataset){
# Converts character date into numeric date
dataset$date1 <- as.character(dataset$period_end)
dataset$date2 <- as.Date(dataset$date1, "%m/%d/%y")
return(dataset)
}
dep_state2 <- date_convert(dep_state)
anx_state2 <- date_convert(anx_state)
anx_or_dep_state2 <- date_convert(anx_or_dep_state)
#Dates Before
dep_stringBefore <- subset(dep_state2, date2>= "2020-05-05" & date2 <"2021-07-05")
anx_stringBefore <- subset(anx_state2, date2>= "2020-05-05" & date2 <"2021-07-05")
anx_or_dep_stringBefore <- subset(anx_or_dep_state2, date2>= "2020-05-05" & date2 <"2021-07-05")
#Dates After
dep_stringAfter <- subset(dep_state2, date2 >= "2021-07-05")
anx_stringAfter <- subset(anx_state2, date2 >= "2021-07-05")
anx_or_dep_stringAfter <- subset(anx_or_dep_state2, date2 >= "2021-07-05")
mean_fun <- function(stateinput,dataset){
state_mean <- with(dataset, mean(value[group == stateinput],na.rm = TRUE))
return(state_mean)
}
# Part 1 - initializes the variables
states <- NULL
totalMean <- NULL
beforeMean <- NULL
afterMean <- NULL
# Part 2 - for loop that assigns values to above variables
# For loop for depression data
for (k in 1:length(dep_state2$group)){
totalMean <- c(totalMean,mean_fun(dep_state2$group[k],dep_state2))
beforeMean <- c(beforeMean,mean_fun(dep_state2$group[k],dep_stringBefore))
afterMean <- c(afterMean,mean_fun(dep_state2$group[k],dep_stringAfter))
states <- c(states,dep_state2$group[k])
}
# Part 2.5 - puts variables from parts 1 and 2 into data frame
dep_Mean <- cbind.data.frame(states,totalMean,beforeMean,afterMean)
# Part 3 - calculates the diff for each state
dep_Dif <- dep_Mean$afterMean-dep_Mean$beforeMean
# Part 4 - adds the diff to the data frame created in part 2.5
dep_Mean <- cbind.data.frame(states,totalMean,beforeMean,afterMean,dep_Dif)
# Part 5 - deletes repeating state rows - only 51 states
new_dep_Mean <- dep_Mean[-c(52:2346),]
# Part 6 - write the data frame to CSV file
write.csv(new_dep_Mean, file = "dep_mean.csv")
# Reinitialize the variables
states <- NULL
totalMean <- NULL
beforeMean <- NULL
afterMean <- NULL
# For loop for anxiety data
for (k in 1:length(anx_state2$group)){
totalMean <- c(totalMean,mean_fun(anx_state2$group[k],anx_state2))
beforeMean <- c(beforeMean,mean_fun(anx_state2$group[k],anx_stringBefore))
afterMean <- c(afterMean,mean_fun(anx_state2$group[k],anx_stringAfter))
states <- c(states,anx_state2$group[k])
}
# Part 2.5 - puts variables from parts 1 and 2 into data frame
anx_Mean <- cbind.data.frame(states,totalMean,beforeMean,afterMean)
# Part 3 - calculates the diff for each state
anx_Dif <- anx_Mean$afterMean-anx_Mean$beforeMean
# Part 4 - adds the diff to the data frame created in part 2.5
anx_Mean <- cbind.data.frame(states,totalMean,beforeMean,afterMean,anx_Dif)
# Part 5 - deletes repeating state rows - only 51 states
new_anx_Mean <- anx_Mean[-c(52:2346),]
# Part 6 - write the data frame to CSV file
write.csv(new_anx_Mean, file = "anx_mean.csv")
# For loop for anxiety or depression data
for (k in 1:length(anx_or_dep_state2$group)){
totalMean <- c(totalMean,mean_fun(anx_or_dep_state2$group[k],anx_or_dep_state2))
beforeMean <- c(beforeMean,mean_fun(anx_or_dep_state2$group[k],anx_or_dep_stringBefore))
afterMean <- c(afterMean,mean_fun(anx_or_dep_state2$group[k],anx_or_dep_stringAfter))
states <- c(states,anx_or_dep_state2$group[k])
}
# Part 2.5 - puts variables from parts 1 and 2 into data frame
anx_or_dep_Mean <- cbind.data.frame(states,totalMean,beforeMean,afterMean)
# Part 3 - calculates the diff for each state
anx_or_dep_Dif <- anx_or_dep_Mean$afterMean-anx_or_dep_Mean$beforeMean
# Part 4 - adds the diff to the data frame created in part 2.5
anx_or_dep_Mean <- cbind.data.frame(states,totalMean,beforeMean,afterMean,anx_or_dep_Dif)
# Part 5 - deletes repeating state rows - only 51 states
new_anx_or_dep_Mean <- anx_or_dep_Mean[-c(52:2346),]
# Part 6 - write the data frame to CSV file
write.csv(new_anx_or_dep_Mean, file = "anx_or_dep_mean.csv")
setwd("~/Documents/Ursinus REU/Age_Anx_Dep/anx_and_dep")
setwd("~/Documents/Ursinus REU/Age_Anx_Dep/anx_and_dep")
# Import libraries
library(ggplot2)
library(plotly)
# Read in CSV and assign to variable
anx_or_dep_comparison <- read.csv("anx_or_dep_2019_vs_2020.csv")
# Modifies the data for R to understand in matrix form
data_base <- reshape(anx_or_dep_comparison,
idvar = "year",
timevar = "month",
direction = "wide")
row.names(data_base) <- data_base$year
data_base <- data_base[ , 2:ncol(data_base)]
colnames(data_base) <- c("May", "June", "July", "August", "September", "October", "November", "December")
data_base <- as.matrix(data_base)
# Creates grouped barplot using ggplot2
barplot(height = data_base,                       # Grouped barplot using Base R
beside = TRUE)
barplot(data_base, main="Anxiety or Depression Symptoms Reported in 2019 vs. 2020",
xlab="Months", col=c("darkblue","red"),
legend = rownames(data_base), beside=TRUE,
cex.names=0.8)
